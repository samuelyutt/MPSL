#include "stm32l476xx.h"
#include "cmsis_gcc.h"
#include "core_cm4.h"
#include "core_cmFunc.h"
#include "core_cmInstr.h"
#include "core_cmSimd.h"
#include "system_stm32l4xx.h"
#define SET_REG(REG, SELECT, VAL) { ((REG)=((REG)&(~(SELECT))) | (VAL)); };


//These functions inside the asm file
extern void GPIO_init();
//extern void Delay1sWith4MHz();
//extern void DelayDebounce();
extern void LEDON();
extern void LEDOFF();

int state;
int pressed;
int on;

unsigned int pll_config[5] =
{
    0b111000000000000100001110001,
    0b011000000000000110000110001,
    0b011000000000001010000110001,
    0b011000000000010000000110001,
    0b011000000000101000000110001
};

void SysTick_Handler(void) // IF INTERRUPT HAPPENS, DO THIS TASK!
{
    //TODO: Show temperature on 7-seg display
	on ^= 1;
}

void SystemClock_Config(){
	/*
	//state %= 5;
	RCC->CR |= RCC_CR_HSION;
	while((RCC->CR & RCC_CR_HSIRDY) == 0);

	RCC->CFGR = 0x00000000;
	RCC->CR  &= 0xFEFFFFFF;
	while (RCC->CR & 0x02000000);


	//RCC->PLLCFGR &= 0x00000001;
	//RCC->PLLCFGR |= pll_config[state];

	RCC->CR |= RCC_CR_PLLON;
	while((RCC->CR & RCC_CR_PLLRDY) == 0);

	RCC->CFGR |= RCC_CFGR_SW_PLL;
	while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
	*/
	SysTick->CTRL |= 0x00000004; //
	SysTick->LOAD = (uint32_t)7999999; //unsigned int 32 bit counter 8000000 (2s interrupt once)
	//system interrupt happens for every 8000000 cpu cycles, that is the peroid of 2 second
	SysTick->CTRL |= 0x00000007; //processor clock, turn on all

	return;
}


void main() {
	SystemClock_Config();
	GPIO_init();
	on = 1;
	while(1) {
		if (on)
			LEDON();
		else
			LEDOFF();
	}

}
