 .syntax unified
 .cpu cortex-m4
 .thumb

.data
	result: .word 0
	max_size: .word 0
.text
.global main
	m: .word 0x5E
	n: .word 0x60

main:
 // r0 = m, r1 = n
 mov r1, #12
 ldr r1, =m
 ldr r2, =n
 movs r3, #1 // r3 = ans
 push {r1,r2,lr}
 BL GCD
 // get return val and store into result

GCD:
 //TODO: Implement your GCD function
 //pop {r1,r2}
	ldr r4, [sp]		// r1 = a
	ldr r5, [sp, #4]	// r2 = b
	ldr r1, [r4]
	ldr r2, [r5]
	cmp r1, #0
	bne 1
	// a == 0
	mul r3, r3, r2
1:
	cmp r2, #0
	bne 2
	// b == 0
	mul r3, r3, r1
2:
	and r6, r1, #1		// a % 2
	and r7, r1, #1		// b % 2

	cmp r6, #0
	beq 3
	// a % 2 != 0; b?
	cmp r7, #0
	beq 5
	// a % 2 != 0; b % 2 != 0
	// else
3:
	// a % 2 == 0; b?
	cmp r7, #0
	bne 4
	// a % 2 == 0; b % 2 == 0

4:
	// a % 2 == 0; b % 2 != 0
	// else if (a % 2 == 0)

5:
	// a % 2 != 0; b % 2 == 0
	// else if (b % 2 == 0)

 BX LR
