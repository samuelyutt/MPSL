 .syntax unified
 .cpu cortex-m4
 .thumb

.data
	result: .word 0
	max_size: .word 0
.text
.global main
	m: .word 0x5E
	n: .word 0x60

main:
	// r0 = m, r1 = n
	mov r1, #12
	ldr r1, =m
	ldr r2, =n
	movs r3, #1 // r3 = ans
 	push {r1,r2,lr}
 	BL GCD
 	ldr r7, = result
	str r1, [r7]
	b L
 // get return val and store into result

GCD:
 //TODO: Implement your GCD function
 //pop {r1,r2}
	ldr r4, [sp]		// r1 = a
	ldr r5, [sp, #4]	// r2 = b
	ldr r1, [r4]
	ldr r2, [r5]
	cmp r1, #0
	bne 1
	// a == 0
	mul r3, r3, r2
	//pop
1:
	cmp r2, #0
	bne 2
	// b == 0
	mul r3, r3, r1
	//pop
2:
	and r6, r1, #1		// a % 2
	and r7, r1, #1		// b % 2

	cmp r6, #0
	beq 3
	// a % 2 != 0; b?
	cmp r7, #0
	beq 5
	// a % 2 != 0; b % 2 != 0
	// else
	sub r8, r1, r2
	cmp r8, #0
	bgt pos
	mov r11, #-1
	mul r8, r8, r11
pos:
	cmp r1, r2
	blt asmall
	push {r8, r2, lr}
	b end
asmall:
	push {r8, r1, lr}
	b end

3:
	// a % 2 == 0; b?
	cmp r7, #0
	bne 4
	// a % 2 == 0; b % 2 == 0
	movs r1, r1, lsr#1
	movs r2, r2, lsr#1
	mov r11, #2
	mul r3, r3, r11
	push {r1, r2, lr}
	b end

4:
	// a % 2 == 0; b % 2 != 0
	// else if (a % 2 == 0)
	movs r1, r1, lsr#1
	push {r1, r2, lr}
	b end

5:
	// a % 2 != 0; b % 2 == 0
	// else if (b % 2 == 0)
	movs r2, r2, lsr#1
	push {r1, r2, lr}
	b end

 BX LR

 end:
	b GCD

L:
	nop
	b L;
