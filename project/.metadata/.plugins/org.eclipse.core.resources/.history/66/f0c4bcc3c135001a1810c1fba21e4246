#include "stm32l476xx.h"


//These functions inside the asm file
extern void GPIO_init();
extern void max7219_init();
extern void max7219_send(unsigned char address, unsigned char data);
extern void max7219_init2();
extern void max7219_send2(unsigned char address, unsigned char data);

#define SET_REG(REG, SELECT, VAL) { ((REG)=((REG)&(~(SELECT))) | (VAL)); };
#define GPIO_PIN_0  ((uint16_t) 0x0001)
#define GPIO_PIN_1  ((uint16_t) 0x0002)
#define TIME_SEC 95.87
#define TIM_COUNTERMODE_UP 0
#define TIM_ARR_VAL 99U
#define TIM_PSC_VAL 39999U


int SCORE_A = 0;
int SCORE_B = 0;
int TIME_LEFT = 10000;
int time;

void reset_SCORE_TIME() {

	for (int i = 2; i <= 8; i++) {
		max7219_send(i, 15);
	}
	max7219_send(1, 0);
	max7219_send(7, 0);
	for (int i = 1; i <= 8; i++) {
		max7219_send2(i, 15);
	}
}

void display_SCORE_A() {
	int tmp_score = SCORE_A;
	if (tmp_score == 0) {
		max7219_send(7, 0);
		return;
	}
	for (int i = 7; i <= 8; i++) {
		int digit = tmp_score % 10;
		if (tmp_score == 0) digit = 15;
		max7219_send(i, digit);
		tmp_score /= 10;
	}
}

void display_SCORE_B() {
	int tmp_score = SCORE_B;
	if (tmp_score == 0) {
		max7219_send(1, 0);
		return;
	}
	for (int i = 1; i <= 2; i++) {
		int digit = tmp_score % 10;
		if (tmp_score == 0) digit = 15;
		max7219_send(i, digit);
		tmp_score /= 10;
	}
}

void display_SEC(int sec) {
	for (int i = 7; i <= 8; i++) {
		int digit = sec % 10;
		max7219_send2(i, digit);
		sec /= 10;
	}
}

void display_MIN(int min) {
	for (int i = 5; i <= 6; i++) {
		int digit = min % 10;
		max7219_send2(i, digit);
		min /= 10;
	}
}

void display_TIME() {
	int tmp_time = TIME_LEFT;
	if (tmp_time < 0) tmp_time = 0;

	int sec = tmp_time / 100;
	display_SEC(sec%60);

	int min = sec / 60;
	display_MIN(min);
}


int ReadGPIO(GPIO_TypeDef *GPIOX, uint16_t GPIO_PIN_Y) {
	return GPIOX->IDR & GPIO_PIN_Y;
}


void init_gpio(){
	RCC->AHB2ENR = RCC->AHB2ENR|0x7;
	GPIOC->MODER=GPIOC->MODER&0xFFFFFF00;
	//set PC0,1,2,3 is Pull-down input
	GPIOC->PUPDR=GPIOC->PUPDR|0xAA;
	//Set PC0,1,2,3 as medium speed mode
	GPIOC->OSPEEDR=GPIOC->OSPEEDR|0x55;
}

void Timer_init(TIM_TypeDef *timer){
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
	SET_REG(TIM2->CR1, TIM_CR1_DIR, TIM_COUNTERMODE_UP);
	TIM2->ARR = (uint32_t)TIM_ARR_VAL;
	TIM2->PSC = (uint32_t)TIM_PSC_VAL;
	TIM2->EGR = 0x0001;
}


void Timer_start(TIM_TypeDef* timer) {
	TIM2->CR1 |= TIM_CR1_CEN;

	int pre_val = TIM_ARR_VAL;
	int n = 0;
	//int cur_time = 0;

	int tmpA = SCORE_A;
	int tmpB = SCORE_B;
	int tmp_time = TIME_LEFT;

	while(1){
		if (/*n < 100 * TIME_SEC &&*/ time != TIM2->CNT) {
			++n;
			TIME_LEFT--;
			time = TIM2->CNT;

			display_TIME();
		}
		// detect score of a
		if(!ReadGPIO(GPIOC, GPIO_PIN_0) && tmp_time > TIME_LEFT && TIME_LEFT > 0){
			SCORE_A++;
			tmp_time = TIME_LEFT - 100;
		}
		// detect score of a
		if(!ReadGPIO(GPIOC, GPIO_PIN_1) && tmp_time > TIME_LEFT && TIME_LEFT > 0){
			SCORE_B++;
			tmp_time = TIME_LEFT - 100;
		}
		//cur_time = TIME_LEFT - n;

		if (tmpA != SCORE_A) {
			display_SCORE_A();
			tmpA = SCORE_A;
		}

		if (tmpB != SCORE_B) {
			display_SCORE_B();
			tmpB = SCORE_B;
		}

	}

}

void main() {
	//unsigned int student_id = 616026;
	//unsigned int student_id2 = 516097;
	GPIO_init();
	max7219_init();
	max7219_init2();

	init_gpio();
	Timer_init(TIM2);
	time = 0;

	reset_SCORE_TIME();
	if (TIME_SEC < 0.01 || TIME_SEC > 10000)
		display(0);
	else
		Timer_start(TIM2);


	while(1);

	//display();
}


